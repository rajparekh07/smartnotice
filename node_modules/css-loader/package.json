{
  "_args": [
    [
      {
        "raw": "css-loader@^0.14.5",
        "scope": null,
        "escapedName": "css-loader",
        "name": "css-loader",
        "rawSpec": "^0.14.5",
        "spec": ">=0.14.5 <0.15.0",
        "type": "range"
      },
      "/Users/rajparekh/Projects/IOT/smartnotice/node_modules/laravel-mix"
    ]
  ],
  "_from": "css-loader@>=0.14.5 <0.15.0",
  "_id": "css-loader@0.14.5",
  "_inCache": true,
  "_location": "/css-loader",
  "_nodeVersion": "0.12.2",
  "_npmUser": {
    "name": "sokra",
    "email": "tobias.koppers@googlemail.com"
  },
  "_npmVersion": "2.10.0",
  "_phantomChildren": {
    "amdefine": "1.0.1",
    "graceful-readlink": "1.0.1"
  },
  "_requested": {
    "raw": "css-loader@^0.14.5",
    "scope": null,
    "escapedName": "css-loader",
    "name": "css-loader",
    "rawSpec": "^0.14.5",
    "spec": ">=0.14.5 <0.15.0",
    "type": "range"
  },
  "_requiredBy": [
    "/laravel-mix"
  ],
  "_resolved": "https://registry.npmjs.org/css-loader/-/css-loader-0.14.5.tgz",
  "_shasum": "d65635b72adc487ac818a2e78b5bb9feca5352ad",
  "_shrinkwrap": null,
  "_spec": "css-loader@^0.14.5",
  "_where": "/Users/rajparekh/Projects/IOT/smartnotice/node_modules/laravel-mix",
  "author": {
    "name": "Tobias Koppers @sokra"
  },
  "bugs": {
    "url": "https://github.com/webpack/css-loader/issues"
  },
  "dependencies": {
    "clean-css": "^3.1.9",
    "fastparse": "^1.1.1",
    "loader-utils": "~0.2.2",
    "source-list-map": "^0.1.4"
  },
  "description": "css loader module for webpack",
  "devDependencies": {
    "codecov.io": "^0.1.2",
    "coveralls": "^2.11.2",
    "istanbul": "^0.3.13",
    "mocha": "^2.2.4",
    "should": "^5.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "d65635b72adc487ac818a2e78b5bb9feca5352ad",
    "tarball": "http://registry.npmjs.org/css-loader/-/css-loader-0.14.5.tgz"
  },
  "gitHead": "51e11f3588c8bde66c5cd6b6d7b9bbbdeda671c4",
  "homepage": "https://github.com/webpack/css-loader#readme",
  "license": "MIT",
  "maintainers": [
    {
      "name": "sokra",
      "email": "tobias.koppers@googlemail.com"
    }
  ],
  "name": "css-loader",
  "optionalDependencies": {},
  "readme": "# css loader for webpack\r\n\r\n## installation\r\n\r\n`npm install css-loader --save-dev`\r\n\r\n## Usage\r\n\r\n[Documentation: Using loaders](http://webpack.github.io/docs/using-loaders.html)\r\n\r\n``` javascript\r\nvar css = require(\"css!./file.css\");\r\n// => returns css code from file.css, resolves imports and url(...)\r\n```\r\n\r\n`@import` and `url(...)` are interpreted like `require()` and will be resolved by the css-loader.\r\nGood loaders for requiring your assets are the [file-loader](https://github.com/webpack/file-loader)\r\nand the [url-loader](https://github.com/webpack/url-loader) which you should specify in your config (see below).\r\n\r\nTo be compatible with existing css files:\r\n* `url(image.png)` => `require(\"./image.png\")`\r\n* `url(~module/image.png)` => `require(\"module/image.png\")`\r\n\r\n### Example config\r\n\r\nThis webpack config can load css files, embed small png images as Data Urls and jpg images as files.\r\n\r\n``` javascript\r\nmodule.exports = {\r\n  module: {\r\n    loaders: [\r\n      { test: /\\.css$/, loader: \"style-loader!css-loader\" },\r\n      { test: /\\.png$/, loader: \"url-loader?limit=100000\" },\r\n      { test: /\\.jpg$/, loader: \"file-loader\" }\r\n    ]\r\n  }\r\n};\r\n```\r\n\r\n### 'Root-relative' urls\r\n\r\nFor urls that start with a `/`, the default behavior is to not translate them:\r\n* `url(/image.png)` => `url(/image.png)`\r\n\r\nIf a `root` query parameter is set, however, it will be prepended to the url\r\nand then translated:\r\n\r\nWith a config like:\r\n\r\n``` javascript\r\n    loaders: [\r\n      { test: /\\.css$/, loader: \"style-loader!css-loader?root=.\" },\r\n      ...\r\n    ]\r\n```\r\n\r\nThe result is:\r\n\r\n* `url(/image.png)` => `require(\"./image.png\")`\r\n\r\n### Local scope\r\n\r\nBy default CSS exports all class names into a global selector scope. This is a feature which offer a local selector scope.\r\n\r\nThe syntax `:local(.className)` can be used to declare `className` in the local scope. The local identifiers are exported by the module.\r\n\r\nWith `:local` (without brackets) local mode can be switched on for this selector. `:global(.className)` can be used to declare an explicit global selector. With `:global` (without brackets) global mode can be switched on for this selector.\r\n\r\nThe loader replaces local selectors with unique identifiers. The choosen unique identifiers are exported by the module.\r\n\r\nExample:\r\n\r\n``` css\r\n:local(.className) { background: red; }\r\n:local .className { color: green; }\r\n:local(.className .subClass) { color: green; }\r\n:local .className .subClass :global(.global-class-name) { color: blue; }\r\n```\r\n\r\nis transformed to\r\n\r\n``` css\r\n._23_aKvs-b8bW2Vg3fwHozO { background: red; }\r\n._23_aKvs-b8bW2Vg3fwHozO { color: green; }\r\n._23_aKvs-b8bW2Vg3fwHozO ._13LGdX8RMStbBE9w-t0gZ1 { color: green; }\r\n._23_aKvs-b8bW2Vg3fwHozO ._13LGdX8RMStbBE9w-t0gZ1 .global-class-name { color: blue; }\r\n```\r\n\r\nand the identifiers are exported:\r\n\r\n``` js\r\nexports.locals = {\r\n  className: \"_23_aKvs-b8bW2Vg3fwHozO\",\r\n  subClass: \"_13LGdX8RMStbBE9w-t0gZ1\"\r\n}\r\n```\r\n\r\nCamelcasing is recommended for local selectors. They are easier to use in the importing javascript module.\r\n\r\nYou can use `:local(#someId)`, but this is not recommended. Use classes instead of ids.\r\n\r\nYou can configure the generated ident with the `localIdentName` query parameter (default `[hash:base64]`). Example: `css-loader?localIdentName=[path][name]---[local]---[hash:base64:5]` for easier debugging.\r\n\r\nNote: For prerendering with extract-text-webpack-plugin you should use `css-loader/locals` instead of `style-loader!css-loader` in the prerendering bundle. It doesn't embed CSS but only exports the identifier mappings.\r\n\r\n### Module mode\r\n\r\n(experimental)\r\n\r\nThe query parameter `module` enables **CSS Module** mode. (`css-loader?module`)\r\n\r\n* Local scoped by default.\r\n* `url(...)` URLs behave like requests in modules:\r\n  * `./file.png` instead of `file.png`\r\n  * `module/file.png` instead of `~module/file.png`\r\n\r\nThanks to [@markdalgleish](https://github.com/markdalgleish) for prior work on this topic.\r\n\r\n### Inheriting\r\n\r\nWhen declaring a local class name you can inherit from another local class name.\r\n\r\n``` css\r\n:local(.className) {\r\n  background: red;\r\n  color: yellow;\r\n}\r\n\r\n:local(.subClass) {\r\n  extends: className;\r\n  background: blue;\r\n}\r\n```\r\n\r\nThis doesn't result in any change to the CSS itself but exports multiple class names:\r\n\r\n``` js\r\nexports.locals = {\r\n  className: \"_23_aKvs-b8bW2Vg3fwHozO\",\r\n  subClass: \"_13LGdX8RMStbBE9w-t0gZ1 _23_aKvs-b8bW2Vg3fwHozO\"\r\n}\r\n```\r\n\r\nand CSS is transformed to:\r\n\r\n``` css\r\n._23_aKvs-b8bW2Vg3fwHozO {\r\n  background: red;\r\n  color: yellow;\r\n}\r\n\r\n._13LGdX8RMStbBE9w-t0gZ1 {\r\n  background: blue;\r\n}\r\n```\r\n\r\n### Importing local class names\r\n\r\nTo import a local class name from another module:\r\n\r\n``` css\r\n:local(.continueButton) {\r\n  extends: button from \"library/button.css\";\r\n  background: red;\r\n}\r\n```\r\n\r\n``` css\r\n:local(.nameEdit) {\r\n  extends: edit highlight from \"./edit.css\";\r\n  background: red;\r\n}\r\n```\r\n\r\nTo import from multiple modules use multiple `extends:` rules. You can also use `url(...)` to specify the module (it behave a bit different).\r\n\r\n``` css\r\n:local(.className) {\r\n  extends: edit hightlight from \"./edit.css\";\r\n  extends: button from url(\"button.css\");\r\n  /* equal to 'extends: button from \"./button.css\";' */\r\n  extends: classFromThisModule;\r\n  background: red;\r\n}\r\n```\r\n\r\n### SourceMaps\r\n\r\nTo include SourceMaps set the `sourceMap` query param.\r\n\r\n`require(\"css-loader?sourceMap!./file.css\")`\r\n\r\nI. e. the extract-text-webpack-plugin can handle them.\r\n\r\n### importing and chained loaders\r\n\r\nThe query parameter `importLoaders` allow to configure which loaders should be applied to `@import`ed resources.\r\n\r\n`importLoaders` (int): That many loaders after the css-loader are used to import resources.\r\n\r\nExamples:\r\n\r\n``` js\r\nrequire(\"style-loader!css-loader?importLoaders=1!autoprefixer-loader!...\")\r\n// => imported resources are handled this way:\r\nrequire(\"css-loader?importLoaders=1!autoprefixer-loader!...\")\r\n\r\nrequire(\"style-loader!css-loader!stylus-loader!...\")\r\n// => imported resources are handled this way:\r\nrequire(\"css-loader!...\")\r\n```\r\n\r\n### Minification\r\n\r\nBy default the css-loader minimizes the css if specified by the module system.\r\n\r\nIn some cases the minification is destructive to the css, so you can provide some options to it. clean-css is used for minification and you find a [list of options here](https://github.com/jakubpawlowicz/clean-css#how-to-use-clean-css-programmatically). Just provide them as query parameter: i. e. `require(\"css-loader?-restructuring&compatibility\")` to disable restructuring and enable compatibility mode.\r\n\r\nYou can also disable or enforce minification with the `minimize` query parameter.\r\n\r\n`require(\"css-loader?minimize!./file.css\")` (enforced)\r\n\r\n`require(\"css-loader?-minimize!./file.css\")` (disabled)\r\n\r\n## License\r\n\r\nMIT (http://www.opensource.org/licenses/mit-license.php)\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/webpack/css-loader.git"
  },
  "scripts": {
    "cover": "istanbul cover node_modules/mocha/bin/_mocha",
    "publish-patch": "mocha && npm version patch && git push && git push --tags && npm publish",
    "test": "mocha",
    "travis": "npm run cover -- --report lcovonly"
  },
  "version": "0.14.5"
}
